class_path: point_frustums.dataloaders.NuScenesDataModule
init_args:
  batch_size: 16
  num_workers: 8
  pin_memory: True
  persistent_workers: True
  augmentations:
    train:
      - class_path: point_frustums.augmentations.Normalize
        init_args:
          apply_to: [lidar]
          lidar:
            channels: [2, 3, 4, 5]  # [z, intensity, timestamp, radial]
            mean: [-0.776, 18.421, 0.098, 12.978]
            std: [1.869, 19.603, 0.057, 12.559]
          camera:
            channels: [ 0, 1, 2 ]
            mean: [ 123.675, 116.28, 103.53 ]
            std: [ 58.395, 57.12, 57.375 ]
      - class_path: point_frustums.augmentations.SubsampleData
        init_args:
          apply_to: [lidar]
          drop_ratio: 0.4
      - class_path: point_frustums.augmentations.RandomFlipHorizontal
        init_args:
          apply_to: [lidar, targets]
          dimension_mapping_lidar: {y: 1, azimuthal: 7}
          probability: 0.4
      - class_path: point_frustums.augmentations.RandomRotate
        init_args:
          apply_to: [ lidar, targets ]
          dimension_mapping_lidar: { x: 0, y: 1, z: 2, azimuthal: 7 }
          probability: 0.8
    val:
      - class_path: point_frustums.augmentations.Normalize
        init_args:
          apply_to: [ lidar ]
          lidar:
            channels: [ 2, 3, 4, 5 ]  # [z, intensity, timestamp, radial]
            mean: [ -0.776, 18.421, 0.098, 12.978 ]
            std: [ 1.869, 19.603, 0.057, 12.559 ]
          camera:
            channels: [ 0, 1, 2 ]
            mean: [ 123.675, 116.28, 103.53 ]
            std: [ 58.395, 57.12, 57.375 ]
    test:
      - class_path: point_frustums.augmentations.Normalize
        init_args:
          apply_to: [ lidar ]
          lidar:
            channels: [ 2, 3, 4, 5 ]  # [z, intensity, timestamp, radial]
            mean: [ -0.776, 18.421, 0.098, 12.978 ]
            std: [ 1.869, 19.603, 0.057, 12.559 ]
          camera:
            channels: [ 0, 1, 2 ]
            mean: [ 123.675, 116.28, 103.53 ]
            std: [ 58.395, 57.12, 57.375 ]
    predict:
      - class_path: point_frustums.augmentations.Normalize
        init_args:
          apply_to: [ lidar ]
          lidar:
            channels: [ 2, 3, 4, 5 ]  # [z, intensity, timestamp, radial]
            mean: [ -0.776, 18.421, 0.098, 12.978 ]
            std: [ 1.869, 19.603, 0.057, 12.559 ]
          camera:
            channels: [ 0, 1, 2 ]
            mean: [ 123.675, 116.28, 103.53 ]
            std: [ 58.395, 57.12, 57.375 ]
  dataset:
    version: v1.0-trainval
    name: NuScenes
    sensors:
      LIDAR_TOP:
        active: True
        modality: lidar
        channels_out: [ x, y, z, intensity, timestamp, radial, polar, azimuthal ]
        angle_of_view_degrees:
          polar: 40
          azimuthal: 360
        orientation_degrees:
          polar: 0
          azimuthal: -90
        sweeps: 4
      CAM_FRONT:
        active: False
        modality: camera
        channels_out: [ r, g, b ]
        angle_of_view_degrees:
          polar: 40
          azimuthal: 70
        orientation_degrees:
          polar: 90
          azimuthal: 0
        resolution:
          polar: 900
          azimuthal: 1600
    annotations:
      coos: EGO
      visibility: 45
      class_aliases: [ pedestrian, car, bus, bicycle, truck, trailer, construction_vehicle, traffic_cone, barrier, motorcycle ]
      alias_to_class:
        pedestrian: human.pedestrian
        car: vehicle.car
        bus: vehicle.bus
        bicycle: vehicle.bicycle
        truck: vehicle.truck
        trailer: vehicle.trailer
        construction_vehicle: vehicle.construction
        traffic_cone: movable_object.trafficcone
        barrier: movable_object.barrier
        motorcycle: vehicle.motorcycle
      alias_to_category:
        pedestrian: pedestrian
        car: vehicle
        bus: vehicle
        bicycle: cycle
        truck: vehicle
        trailer: vehicle
        construction_vehicle: vehicle
        traffic_cone: other
        barrier: other
        motorcycle: cycle
      category_to_attributes:
        pedestrian: [ moving, standing, sitting_lying_down ]
        vehicle: [ moving, parked, stopped ]
        cycle: [ with_rider, without_rider ]
        other: [ void ]
    load_velocity: True
    load_can: True